{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b0b958c4",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-11-20T10:34:07.120840Z",
     "iopub.status.busy": "2024-11-20T10:34:07.120424Z",
     "iopub.status.idle": "2024-11-20T10:34:08.036725Z",
     "shell.execute_reply": "2024-11-20T10:34:08.035667Z"
    },
    "papermill": {
     "duration": 0.925798,
     "end_time": "2024-11-20T10:34:08.039117",
     "exception": false,
     "start_time": "2024-11-20T10:34:07.113319",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/indian-politics-2004-2019/IndiaVotes_PC__All_States_2009.csv\n",
      "/kaggle/input/indian-politics-2004-2019/IndiaVotes_PC__All_States_2014.csv\n",
      "/kaggle/input/indian-politics-2004-2019/2024.csv\n",
      "/kaggle/input/indian-politics-2004-2019/2019.csv\n",
      "/kaggle/input/indian-politics-2004-2019/cleaned.csv\n",
      "/kaggle/input/indian-politics-2004-2019/2004.csv\n",
      "/kaggle/input/indian-politics-2004-2019/long_data.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "932fab80",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T10:34:08.050625Z",
     "iopub.status.busy": "2024-11-20T10:34:08.050092Z",
     "iopub.status.idle": "2024-11-20T10:34:09.688729Z",
     "shell.execute_reply": "2024-11-20T10:34:09.687799Z"
    },
    "papermill": {
     "duration": 1.646993,
     "end_time": "2024-11-20T10:34:09.691112",
     "exception": false,
     "start_time": "2024-11-20T10:34:08.044119",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "79ccc3eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T10:34:09.703638Z",
     "iopub.status.busy": "2024-11-20T10:34:09.703133Z",
     "iopub.status.idle": "2024-11-20T10:34:09.729517Z",
     "shell.execute_reply": "2024-11-20T10:34:09.728366Z"
    },
    "papermill": {
     "duration": 0.035861,
     "end_time": "2024-11-20T10:34:09.732130",
     "exception": false,
     "start_time": "2024-11-20T10:34:09.696269",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "long_data = pd.read_csv('/kaggle/input/indian-politics-2004-2019/long_data.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07aa3388",
   "metadata": {
    "papermill": {
     "duration": 0.004589,
     "end_time": "2024-11-20T10:34:09.741722",
     "exception": false,
     "start_time": "2024-11-20T10:34:09.737133",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# ANOVA\n",
    "## To check for differences in voter turnout across years or states"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "05716a8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T10:34:09.752957Z",
     "iopub.status.busy": "2024-11-20T10:34:09.752546Z",
     "iopub.status.idle": "2024-11-20T10:34:09.779500Z",
     "shell.execute_reply": "2024-11-20T10:34:09.778173Z"
    },
    "papermill": {
     "duration": 0.035401,
     "end_time": "2024-11-20T10:34:09.782056",
     "exception": false,
     "start_time": "2024-11-20T10:34:09.746655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Check if voter turnout differs by Year\n",
    "turnout_by_year = [long_data[long_data['Year'] == year]['Turnout'] for year in long_data['Year'].unique()]\n",
    "f_statistic_year, p_value_year = stats.f_oneway(*turnout_by_year)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0549537c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T10:34:09.794296Z",
     "iopub.status.busy": "2024-11-20T10:34:09.793929Z",
     "iopub.status.idle": "2024-11-20T10:34:09.822934Z",
     "shell.execute_reply": "2024-11-20T10:34:09.821833Z"
    },
    "papermill": {
     "duration": 0.038273,
     "end_time": "2024-11-20T10:34:09.825225",
     "exception": false,
     "start_time": "2024-11-20T10:34:09.786952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Check if voter turnout differs by State\n",
    "turnout_by_state = [long_data[long_data['State'] == state]['Turnout'] for state in long_data['State'].unique()]\n",
    "f_statistic_state, p_value_state = stats.f_oneway(*turnout_by_state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f7513645",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T10:34:09.836502Z",
     "iopub.status.busy": "2024-11-20T10:34:09.836146Z",
     "iopub.status.idle": "2024-11-20T10:34:09.847527Z",
     "shell.execute_reply": "2024-11-20T10:34:09.846442Z"
    },
    "papermill": {
     "duration": 0.019843,
     "end_time": "2024-11-20T10:34:09.849788",
     "exception": false,
     "start_time": "2024-11-20T10:34:09.829945",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Check if margin percentage differs by Year\n",
    "margin_by_year = [long_data[long_data['Year'] == year]['Margin_Percentage'] for year in long_data['Year'].unique()]\n",
    "f_statistic_margin_year, p_value_margin_year = stats.f_oneway(*margin_by_year)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "11ef0d1f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T10:34:09.861104Z",
     "iopub.status.busy": "2024-11-20T10:34:09.860712Z",
     "iopub.status.idle": "2024-11-20T10:34:09.884054Z",
     "shell.execute_reply": "2024-11-20T10:34:09.882959Z"
    },
    "papermill": {
     "duration": 0.031546,
     "end_time": "2024-11-20T10:34:09.886324",
     "exception": false,
     "start_time": "2024-11-20T10:34:09.854778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Check if margin percentage differs by State\n",
    "margin_by_state = [long_data[long_data['State'] == state]['Margin_Percentage'] for state in long_data['State'].unique()]\n",
    "f_statistic_margin_state, p_value_margin_state = stats.f_oneway(*margin_by_state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8a9b5b08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T10:34:09.897477Z",
     "iopub.status.busy": "2024-11-20T10:34:09.897134Z",
     "iopub.status.idle": "2024-11-20T10:34:09.937527Z",
     "shell.execute_reply": "2024-11-20T10:34:09.936383Z"
    },
    "papermill": {
     "duration": 0.048833,
     "end_time": "2024-11-20T10:34:09.939979",
     "exception": false,
     "start_time": "2024-11-20T10:34:09.891146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Assess how Party Affiliation impacts voter turnout\n",
    "turnout_by_party = [long_data[long_data['Party'] == party]['Turnout'] for party in long_data['Party'].unique()]\n",
    "f_statistic_party, p_value_party = stats.f_oneway(*turnout_by_party)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a2aba9ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T10:34:09.951752Z",
     "iopub.status.busy": "2024-11-20T10:34:09.951367Z",
     "iopub.status.idle": "2024-11-20T10:34:09.988572Z",
     "shell.execute_reply": "2024-11-20T10:34:09.987621Z"
    },
    "papermill": {
     "duration": 0.045977,
     "end_time": "2024-11-20T10:34:09.990960",
     "exception": false,
     "start_time": "2024-11-20T10:34:09.944983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Assess how Party Affiliation impacts margin of victory\n",
    "margin_by_party = [long_data[long_data['Party'] == party]['Margin_Percentage'] for party in long_data['Party'].unique()]\n",
    "f_statistic_margin_party, p_value_margin_party = stats.f_oneway(*margin_by_party)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ad6df284",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T10:34:10.002427Z",
     "iopub.status.busy": "2024-11-20T10:34:10.002000Z",
     "iopub.status.idle": "2024-11-20T10:34:10.009413Z",
     "shell.execute_reply": "2024-11-20T10:34:10.008355Z"
    },
    "papermill": {
     "duration": 0.015728,
     "end_time": "2024-11-20T10:34:10.011636",
     "exception": false,
     "start_time": "2024-11-20T10:34:09.995908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ANOVA Results for Voter Turnout by Year:\n",
      "F-statistic: 94.49988013309391, P-value: 2.1896843867641655e-73\n",
      "\n",
      "ANOVA Results for Voter Turnout by State:\n",
      "F-statistic: 62.525354876164165, P-value: 2.6336032936608136e-262\n",
      "\n",
      "ANOVA Results for Margin Percentage by Year:\n",
      "F-statistic: 27.715291230624977, P-value: 2.1393079204030227e-22\n",
      "\n",
      "ANOVA Results for Margin Percentage by State:\n",
      "F-statistic: 7.879672384610577, P-value: 1.6244793189153628e-32\n",
      "\n",
      "ANOVA Results for Voter Turnout by Party:\n",
      "F-statistic: 12.381926043774389, P-value: 7.094360699276501e-108\n",
      "\n",
      "ANOVA Results for Margin Percentage by Party:\n",
      "F-statistic: 2.923774361228933, P-value: 6.101255303313241e-14\n"
     ]
    }
   ],
   "source": [
    "print(\"ANOVA Results for Voter Turnout by Year:\")\n",
    "print(f\"F-statistic: {f_statistic_year}, P-value: {p_value_year}\")\n",
    "\n",
    "print(\"\\nANOVA Results for Voter Turnout by State:\")\n",
    "print(f\"F-statistic: {f_statistic_state}, P-value: {p_value_state}\")\n",
    "\n",
    "print(\"\\nANOVA Results for Margin Percentage by Year:\")\n",
    "print(f\"F-statistic: {f_statistic_margin_year}, P-value: {p_value_margin_year}\")\n",
    "\n",
    "print(\"\\nANOVA Results for Margin Percentage by State:\")\n",
    "print(f\"F-statistic: {f_statistic_margin_state}, P-value: {p_value_margin_state}\")\n",
    "\n",
    "print(\"\\nANOVA Results for Voter Turnout by Party:\")\n",
    "print(f\"F-statistic: {f_statistic_party}, P-value: {p_value_party}\")\n",
    "\n",
    "print(\"\\nANOVA Results for Margin Percentage by Party:\")\n",
    "print(f\"F-statistic: {f_statistic_margin_party}, P-value: {p_value_margin_party}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a76a241",
   "metadata": {
    "papermill": {
     "duration": 0.004491,
     "end_time": "2024-11-20T10:34:10.020958",
     "exception": false,
     "start_time": "2024-11-20T10:34:10.016467",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## More on the results: \n",
    "\n",
    "\r\n",
    "### 1. **Voter Turnout by Year**\r\n",
    "   - **F-statistic**: 94.50\r\n",
    "   - **P-value**: 2.19e-73\r\n",
    "   - **Interpretation**: The extremely low P-value (< 0.05) indicates a **statistically significant** difference in voter turnout across different years. This suggests that voter turnout varies significantly over time (i.e., different years have different voter turnouts).\r\n",
    "\r\n",
    "### 2. **Voter Turnout by State**\r\n",
    "   - **F-statistic**: 62.53\r\n",
    "   - **P-value**: 2.63e-262\r\n",
    "   - **Interpretation**: The very low P-value indicates that voter turnout significantly differs across different states. This means that states exhibit varying levels of voter turnout, and there are statistical differences between them.\r\n",
    "\r\n",
    "### 3. **Margin Percentage by Year**\r\n",
    "   - **F-statistic**: 27.72\r\n",
    "   - **P-value**: 2.14e-22\r\n",
    "   - **Interpretation**: The low P-value indicates a **significant** difference in the margin percentages across different years. This means the margin of victory (difference between parties) varies significantly over time.\r\n",
    "\r\n",
    "### 4. **Margin Percentage by State**\r\n",
    "   - **F-statistic**: 7.88\r\n",
    "   - **P-value**: 1.62e-32\r\n",
    "   - **Interpretation**: The P-value is very small, indicating that margin percentages differ significantly across states. This suggests that the margin of victory varies by state, potentially due to local dynamics and party preferences.\r\n",
    "\r\n",
    "### 5. **Voter Turnout by Party**\r\n",
    "   - **F-statistic**: 12.38\r\n",
    "   - **P-value**: 7.09e-108\r\n",
    "   - **Interpretation**: A very low P-value shows that voter turnout varies significantly based on the political party affiliation. This means different parties see varying levels of voter participation.\r\n",
    "\r\n",
    "### 6. **Margin Percentage by Party**\r\n",
    "   - **F-statistic**: 2.92\r\n",
    "   - **P-value**: 6.10e-14\r\n",
    "   - **Interpretation**: The P-value is low, indicating that margin percentages differ across political parties. Although the difference is not as large as for voter turnout, it still suggests that the margin of victory  Let me know if you'd like to proceed with that!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40fbf434",
   "metadata": {
    "papermill": {
     "duration": 0.004473,
     "end_time": "2024-11-20T10:34:10.030161",
     "exception": false,
     "start_time": "2024-11-20T10:34:10.025688",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Net-net:\n",
    "\n",
    "1. **Voter Turnout**:\n",
    "   - **Across Years**: There are significant variations in voter turnout over different years.\n",
    "   - **Across States**: Voter turnout also varies significantly from state to state.\n",
    "   - **Across Parties**: Different political parties experience varying levels of voter participation.\n",
    "\n",
    "2. **Margin of Victory (Margin Percentage)**:\n",
    "   - **Across Years**: The margin of victory fluctuates over different years.\n",
    "   - **Across States**: The margin of victory also differs significantly between states.\n",
    "   - **Across Parties**: There are statistical differences in the margin of victory based on party affiliation, although the effect is less pronounced compared to voter turnout.\n",
    "\n",
    "### ALSO: \n",
    "- The **low P-values** across all tests suggest that all the variables analyzed (Year, State, and Party) have a significant effect on **voter turnout** and **margin percentages**.\n",
    "- This means there are real, statistically significant differences in these variables across time, geography (states), and political affiliations (parties)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b58170b",
   "metadata": {
    "papermill": {
     "duration": 0.004349,
     "end_time": "2024-11-20T10:34:10.039138",
     "exception": false,
     "start_time": "2024-11-20T10:34:10.034789",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Some extras to really understand what's going on for when we pass to time series models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ec52eaae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T10:34:10.050321Z",
     "iopub.status.busy": "2024-11-20T10:34:10.049511Z",
     "iopub.status.idle": "2024-11-20T10:34:11.578547Z",
     "shell.execute_reply": "2024-11-20T10:34:11.577635Z"
    },
    "papermill": {
     "duration": 1.537367,
     "end_time": "2024-11-20T10:34:11.581077",
     "exception": false,
     "start_time": "2024-11-20T10:34:10.043710",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import statsmodels.api as sm\n",
    "from statsmodels.formula.api import ols\n",
    "from statsmodels.stats.multicomp import pairwise_tukeyhsd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "89761f16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T10:34:11.592710Z",
     "iopub.status.busy": "2024-11-20T10:34:11.592159Z",
     "iopub.status.idle": "2024-11-20T10:34:12.100658Z",
     "shell.execute_reply": "2024-11-20T10:34:12.099423Z"
    },
    "papermill": {
     "duration": 0.516826,
     "end_time": "2024-11-20T10:34:12.103017",
     "exception": false,
     "start_time": "2024-11-20T10:34:11.586191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tukey's HSD for Voter Turnout by Year:\n",
      "Multiple Comparison of Means - Tukey HSD, FWER=0.05 \n",
      "====================================================\n",
      "group1 group2 meandiff p-adj   lower   upper  reject\n",
      "----------------------------------------------------\n",
      "  2004   2009  -0.2073  0.999 -2.3797   1.965  False\n",
      "  2004   2014   8.2462    0.0  6.0738 10.4186   True\n",
      "  2004   2019  12.1286    0.0  9.9562  14.301   True\n",
      "  2004   2024   7.8205    0.0  5.6481  9.9928   True\n",
      "  2009   2014   8.4535    0.0  6.2812 10.6259   True\n",
      "  2009   2019   12.336    0.0 10.1636 14.5083   True\n",
      "  2009   2024   8.0278    0.0  5.8554 10.2002   True\n",
      "  2014   2019   3.8824    0.0    1.71  6.0548   True\n",
      "  2014   2024  -0.4257 0.9837 -2.5981  1.7467  False\n",
      "  2019   2024  -4.3081    0.0 -6.4805 -2.1358   True\n",
      "----------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "# Tukey HSD for Voter Turnout by Year\n",
    "turnout_year_ols = ols('Turnout ~ C(Year)', data=long_data).fit()\n",
    "turnout_year_aov = sm.stats.anova_lm(turnout_year_ols, typ=2)\n",
    "turnout_year_tukey = pairwise_tukeyhsd(long_data['Turnout'], long_data['Year'])\n",
    "print(\"Tukey's HSD for Voter Turnout by Year:\")\n",
    "print(turnout_year_tukey)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e68aeecd",
   "metadata": {
    "papermill": {
     "duration": 0.004629,
     "end_time": "2024-11-20T10:34:12.112654",
     "exception": false,
     "start_time": "2024-11-20T10:34:12.108025",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* 2004 vs 2014, 2004 vs 2019, 2009 vs 2019, and several other year pairs show significant differences. These years experienced notable changes in voter turnout.\n",
    "* 2004 vs 2009 and 2014 vs 2024 show no significant differences, which might suggest that these years had relatively stable voter turnout."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4b9e4e47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T10:34:12.124146Z",
     "iopub.status.busy": "2024-11-20T10:34:12.123741Z",
     "iopub.status.idle": "2024-11-20T10:34:12.618601Z",
     "shell.execute_reply": "2024-11-20T10:34:12.617427Z"
    },
    "papermill": {
     "duration": 0.504707,
     "end_time": "2024-11-20T10:34:12.622187",
     "exception": false,
     "start_time": "2024-11-20T10:34:12.117480",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Tukey's HSD for Margin Percentage by Year:\n",
      "Multiple Comparison of Means - Tukey HSD, FWER=0.05 \n",
      "====================================================\n",
      "group1 group2 meandiff p-adj   lower   upper  reject\n",
      "----------------------------------------------------\n",
      "  2004   2009  -2.2081 0.0436 -4.3772  -0.039   True\n",
      "  2004   2014   3.7433    0.0  1.5742  5.9124   True\n",
      "  2004   2019   5.1942    0.0  3.0251  7.3633   True\n",
      "  2004   2024   0.9441 0.7581  -1.225  3.1132  False\n",
      "  2009   2014   5.9514    0.0  3.7823  8.1205   True\n",
      "  2009   2019   7.4024    0.0  5.2333  9.5715   True\n",
      "  2009   2024   3.1522 0.0007  0.9831  5.3213   True\n",
      "  2014   2019   1.4509 0.3585 -0.7182    3.62  False\n",
      "  2014   2024  -2.7992  0.004 -4.9683 -0.6301   True\n",
      "  2019   2024  -4.2501    0.0 -6.4192  -2.081   True\n",
      "----------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "# Tukey HSD for Margin Percentage by Year\n",
    "margin_year_ols = ols('Margin_Percentage ~ C(Year)', data=long_data).fit()\n",
    "margin_year_aov = sm.stats.anova_lm(margin_year_ols, typ=2)\n",
    "margin_year_tukey = pairwise_tukeyhsd(long_data['Margin_Percentage'], long_data['Year'])\n",
    "print(\"\\nTukey's HSD for Margin Percentage by Year:\")\n",
    "print(margin_year_tukey)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43c2ce89",
   "metadata": {
    "papermill": {
     "duration": 0.005272,
     "end_time": "2024-11-20T10:34:12.634210",
     "exception": false,
     "start_time": "2024-11-20T10:34:12.628938",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* There are significant differences in margin percentages for several year pairs (e.g., 2004 vs 2009, 2009 vs 2024, and 2004 vs 2019).\n",
    "* The 2004 vs 2024 and 2014 vs 2019 comparisons do not show significant differences, meaning the margin percentage remained relatively stable between those years."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76933e0b",
   "metadata": {
    "papermill": {
     "duration": 0.004809,
     "end_time": "2024-11-20T10:34:12.644799",
     "exception": false,
     "start_time": "2024-11-20T10:34:12.639990",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Correlation analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ee452ad2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T10:34:12.657065Z",
     "iopub.status.busy": "2024-11-20T10:34:12.656189Z",
     "iopub.status.idle": "2024-11-20T10:34:12.665349Z",
     "shell.execute_reply": "2024-11-20T10:34:12.664202Z"
    },
    "papermill": {
     "duration": 0.017619,
     "end_time": "2024-11-20T10:34:12.667522",
     "exception": false,
     "start_time": "2024-11-20T10:34:12.649903",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "correlation_matrix = long_data[['Turnout', 'Electors', 'Votes', 'Margin_Percentage']].corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f68dbb6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T10:34:12.679471Z",
     "iopub.status.busy": "2024-11-20T10:34:12.679106Z",
     "iopub.status.idle": "2024-11-20T10:34:12.695867Z",
     "shell.execute_reply": "2024-11-20T10:34:12.694689Z"
    },
    "papermill": {
     "duration": 0.02548,
     "end_time": "2024-11-20T10:34:12.698158",
     "exception": false,
     "start_time": "2024-11-20T10:34:12.672678",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Turnout</th>\n",
       "      <th>Electors</th>\n",
       "      <th>Votes</th>\n",
       "      <th>Margin_Percentage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Turnout</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.118558</td>\n",
       "      <td>0.540144</td>\n",
       "      <td>0.064914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Electors</th>\n",
       "      <td>-0.118558</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.757609</td>\n",
       "      <td>0.109736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Votes</th>\n",
       "      <td>0.540144</td>\n",
       "      <td>0.757609</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.124724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Margin_Percentage</th>\n",
       "      <td>0.064914</td>\n",
       "      <td>0.109736</td>\n",
       "      <td>0.124724</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Turnout  Electors     Votes  Margin_Percentage\n",
       "Turnout            1.000000 -0.118558  0.540144           0.064914\n",
       "Electors          -0.118558  1.000000  0.757609           0.109736\n",
       "Votes              0.540144  0.757609  1.000000           0.124724\n",
       "Margin_Percentage  0.064914  0.109736  0.124724           1.000000"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "correlation_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7d99510f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T10:34:12.710312Z",
     "iopub.status.busy": "2024-11-20T10:34:12.709928Z",
     "iopub.status.idle": "2024-11-20T10:34:13.082386Z",
     "shell.execute_reply": "2024-11-20T10:34:13.080754Z"
    },
    "papermill": {
     "duration": 0.382631,
     "end_time": "2024-11-20T10:34:13.085992",
     "exception": false,
     "start_time": "2024-11-20T10:34:12.703361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(correlation_matrix, annot=True, cmap=\"coolwarm\", fmt=\".2f\")\n",
    "plt.title(\"Correlation Heatmap\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a33270ae",
   "metadata": {
    "papermill": {
     "duration": 0.010131,
     "end_time": "2024-11-20T10:34:13.106053",
     "exception": false,
     "start_time": "2024-11-20T10:34:13.095922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6120521,
     "sourceId": 9960869,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.402705,
   "end_time": "2024-11-20T10:34:13.840909",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-11-20T10:34:04.438204",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
