{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9608f3f1",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:54.988076Z",
     "iopub.status.busy": "2024-11-20T01:56:54.987716Z",
     "iopub.status.idle": "2024-11-20T01:56:55.772697Z",
     "shell.execute_reply": "2024-11-20T01:56:55.771605Z"
    },
    "papermill": {
     "duration": 0.793827,
     "end_time": "2024-11-20T01:56:55.775145",
     "exception": false,
     "start_time": "2024-11-20T01:56:54.981318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/indian-politics-2004-2019/IndiaVotes_PC__All_States_2009.csv\n",
      "/kaggle/input/indian-politics-2004-2019/IndiaVotes_PC__All_States_2014.csv\n",
      "/kaggle/input/indian-politics-2004-2019/2024.csv\n",
      "/kaggle/input/indian-politics-2004-2019/2019.csv\n",
      "/kaggle/input/indian-politics-2004-2019/cleaned.csv\n",
      "/kaggle/input/indian-politics-2004-2019/2004.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "29e5c4f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:55.789385Z",
     "iopub.status.busy": "2024-11-20T01:56:55.788918Z",
     "iopub.status.idle": "2024-11-20T01:56:57.505595Z",
     "shell.execute_reply": "2024-11-20T01:56:57.504523Z"
    },
    "papermill": {
     "duration": 1.724903,
     "end_time": "2024-11-20T01:56:57.507968",
     "exception": false,
     "start_time": "2024-11-20T01:56:55.783065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.metrics import classification_report, accuracy_score\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "deff9db1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:57.518965Z",
     "iopub.status.busy": "2024-11-20T01:56:57.518173Z",
     "iopub.status.idle": "2024-11-20T01:56:57.536086Z",
     "shell.execute_reply": "2024-11-20T01:56:57.535029Z"
    },
    "papermill": {
     "duration": 0.025686,
     "end_time": "2024-11-20T01:56:57.538218",
     "exception": false,
     "start_time": "2024-11-20T01:56:57.512532",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/kaggle/input/indian-politics-2004-2019/cleaned.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0ace18a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:57.549656Z",
     "iopub.status.busy": "2024-11-20T01:56:57.548751Z",
     "iopub.status.idle": "2024-11-20T01:56:57.557528Z",
     "shell.execute_reply": "2024-11-20T01:56:57.556522Z"
    },
    "papermill": {
     "duration": 0.016507,
     "end_time": "2024-11-20T01:56:57.559685",
     "exception": false,
     "start_time": "2024-11-20T01:56:57.543178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.rename(columns={'Unnamed: 0': 'PC'}, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "276b01cc",
   "metadata": {
    "papermill": {
     "duration": 0.004073,
     "end_time": "2024-11-20T01:56:57.568348",
     "exception": false,
     "start_time": "2024-11-20T01:56:57.564275",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2024"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2ea11ae7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:57.579955Z",
     "iopub.status.busy": "2024-11-20T01:56:57.579046Z",
     "iopub.status.idle": "2024-11-20T01:56:57.594039Z",
     "shell.execute_reply": "2024-11-20T01:56:57.593032Z"
    },
    "papermill": {
     "duration": 0.023476,
     "end_time": "2024-11-20T01:56:57.596147",
     "exception": false,
     "start_time": "2024-11-20T01:56:57.572671",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original classes for 2024: [1, 2, 4, 6, 7, 8, 11, 13, 17, 18, 21, 22, 25, 29, 32, 34, 42, 47, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69]\n",
      "Label mapping for 2024: {1: 0, 2: 1, 4: 2, 6: 3, 7: 4, 8: 5, 11: 6, 13: 7, 17: 8, 18: 9, 21: 10, 22: 11, 25: 12, 29: 13, 32: 14, 34: 15, 42: 16, 47: 17, 51: 18, 53: 19, 54: 20, 56: 21, 57: 22, 58: 23, 59: 24, 60: 25, 61: 26, 62: 27, 63: 28, 64: 29, 65: 30, 66: 31, 67: 32, 68: 33, 69: 34}\n",
      "New class labels for 2024: [ 1  2  0 23 14 24  7  5 25 26 27  3  6 15 18 10  4 28 29 30 31 16 19 32\n",
      "  9 12 20 33  8 21 17 34 22 11 13]\n"
     ]
    }
   ],
   "source": [
    "original_classes_2024 = sorted(df['Party_2024'].unique())\n",
    "\n",
    "label_mapping_2024 = {original_classes_2024[i]: i for i in range(len(original_classes_2024))}\n",
    "\n",
    "df['Party_2024_mapped'] = df['Party_2024'].map(label_mapping_2024)\n",
    "\n",
    "print(\"Original classes for 2024:\", original_classes_2024)\n",
    "print(\"Label mapping for 2024:\", label_mapping_2024)\n",
    "print(\"New class labels for 2024:\", df['Party_2024_mapped'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2f334ea2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:57.606317Z",
     "iopub.status.busy": "2024-11-20T01:56:57.605980Z",
     "iopub.status.idle": "2024-11-20T01:56:57.610629Z",
     "shell.execute_reply": "2024-11-20T01:56:57.609733Z"
    },
    "papermill": {
     "duration": 0.01175,
     "end_time": "2024-11-20T01:56:57.612357",
     "exception": false,
     "start_time": "2024-11-20T01:56:57.600607",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "features_2024 = [\n",
    "    'State_2004', 'Electors_2004', 'Votes_2004', 'Turnout_2004', 'Margin_2004', 'Margin %_2004',\n",
    "    'State_2009', 'Electors_2009', 'Votes_2009', 'Turnout_2009', 'Margin_2009', 'Margin %_2009',\n",
    "    'State_2014', 'Electors_2014', 'Votes_2014', 'Turnout_2014', 'Margin_2014', 'Margin %_2014',\n",
    "    'State_2019', 'Electors_2019', 'Votes_2019', 'Turnout_2019', 'Margin_2019', 'Margin %_2019'\n",
    "]\n",
    "\n",
    "target_2024 = 'Party_2024_mapped'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1eb4f856",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:57.622186Z",
     "iopub.status.busy": "2024-11-20T01:56:57.621869Z",
     "iopub.status.idle": "2024-11-20T01:56:57.629016Z",
     "shell.execute_reply": "2024-11-20T01:56:57.628218Z"
    },
    "papermill": {
     "duration": 0.014169,
     "end_time": "2024-11-20T01:56:57.630881",
     "exception": false,
     "start_time": "2024-11-20T01:56:57.616712",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df[features_2024]\n",
    "y = df[target_2024]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c181ce64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:57.641452Z",
     "iopub.status.busy": "2024-11-20T01:56:57.640699Z",
     "iopub.status.idle": "2024-11-20T01:56:57.648523Z",
     "shell.execute_reply": "2024-11-20T01:56:57.647624Z"
    },
    "papermill": {
     "duration": 0.014982,
     "end_time": "2024-11-20T01:56:57.650322",
     "exception": false,
     "start_time": "2024-11-20T01:56:57.635340",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "79f92b90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:57.660964Z",
     "iopub.status.busy": "2024-11-20T01:56:57.660256Z",
     "iopub.status.idle": "2024-11-20T01:56:57.664699Z",
     "shell.execute_reply": "2024-11-20T01:56:57.663706Z"
    },
    "papermill": {
     "duration": 0.01193,
     "end_time": "2024-11-20T01:56:57.666763",
     "exception": false,
     "start_time": "2024-11-20T01:56:57.654833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "nb_model = MultinomialNB()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "22da7548",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:57.677849Z",
     "iopub.status.busy": "2024-11-20T01:56:57.676875Z",
     "iopub.status.idle": "2024-11-20T01:56:57.696066Z",
     "shell.execute_reply": "2024-11-20T01:56:57.695146Z"
    },
    "papermill": {
     "duration": 0.026682,
     "end_time": "2024-11-20T01:56:57.698073",
     "exception": false,
     "start_time": "2024-11-20T01:56:57.671391",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MultinomialNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MultinomialNB</label><div class=\"sk-toggleable__content\"><pre>MultinomialNB()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "MultinomialNB()"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nb_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d09282b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:57.709343Z",
     "iopub.status.busy": "2024-11-20T01:56:57.708639Z",
     "iopub.status.idle": "2024-11-20T01:56:57.734121Z",
     "shell.execute_reply": "2024-11-20T01:56:57.733032Z"
    },
    "papermill": {
     "duration": 0.034242,
     "end_time": "2024-11-20T01:56:57.737055",
     "exception": false,
     "start_time": "2024-11-20T01:56:57.702813",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Total predicted number of seats by each party in 2024:\n",
      "Party 0: 7 seats\n",
      "Party 1: 6 seats\n",
      "Party 2: 3 seats\n",
      "Party 3: 2 seats\n",
      "Party 4: 3 seats\n",
      "Party 5: 1 seats\n",
      "Party 7: 1 seats\n",
      "Party 8: 1 seats\n",
      "Party 9: 5 seats\n",
      "Party 10: 5 seats\n",
      "Party 11: 1 seats\n",
      "Party 12: 1 seats\n",
      "Party 15: 2 seats\n",
      "Party 16: 3 seats\n",
      "Party 18: 5 seats\n",
      "Party 19: 1 seats\n",
      "Party 20: 11 seats\n",
      "Party 21: 1 seats\n",
      "Party 22: 2 seats\n",
      "Party 23: 3 seats\n",
      "Party 26: 1 seats\n",
      "Party 27: 1 seats\n",
      "Party 28: 1 seats\n",
      "Party 29: 4 seats\n",
      "Party 30: 1 seats\n",
      "Party 31: 4 seats\n",
      "Party 34: 1 seats\n",
      "Model Accuracy: 0.09090909090909091\n",
      "\n",
      "Classification Report for 2024:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.14      0.33      0.20         3\n",
      "           1       0.83      0.12      0.21        42\n",
      "           2       0.33      0.07      0.11        15\n",
      "           3       0.00      0.00      0.00         0\n",
      "           4       0.00      0.00      0.00         1\n",
      "           5       0.00      0.00      0.00         1\n",
      "           6       0.00      0.00      0.00         1\n",
      "           7       0.00      0.00      0.00         0\n",
      "           8       0.00      0.00      0.00         0\n",
      "           9       0.00      0.00      0.00         0\n",
      "          10       0.00      0.00      0.00         1\n",
      "          11       0.00      0.00      0.00         0\n",
      "          12       0.00      0.00      0.00         0\n",
      "          14       0.00      0.00      0.00         5\n",
      "          15       0.00      0.00      0.00         0\n",
      "          16       0.00      0.00      0.00         0\n",
      "          17       0.00      0.00      0.00         1\n",
      "          18       0.00      0.00      0.00         1\n",
      "          19       0.00      0.00      0.00         0\n",
      "          20       0.00      0.00      0.00         0\n",
      "          21       0.00      0.00      0.00         0\n",
      "          22       0.00      0.00      0.00         0\n",
      "          23       0.00      0.00      0.00         2\n",
      "          26       0.00      0.00      0.00         1\n",
      "          27       0.00      0.00      0.00         0\n",
      "          28       0.00      0.00      0.00         0\n",
      "          29       0.00      0.00      0.00         0\n",
      "          30       0.00      0.00      0.00         0\n",
      "          31       0.00      0.00      0.00         2\n",
      "          32       0.00      0.00      0.00         1\n",
      "          34       0.00      0.00      0.00         0\n",
      "\n",
      "    accuracy                           0.09        77\n",
      "   macro avg       0.04      0.02      0.02        77\n",
      "weighted avg       0.53      0.09      0.14        77\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "y_pred = nb_model.predict(X_test)\n",
    "\n",
    "party_seat_counts_2024 = pd.Series(y_pred).value_counts().sort_index()\n",
    "\n",
    "print(\"\\nTotal predicted number of seats by each party in 2024:\")\n",
    "for party, seats in party_seat_counts_2024.items():\n",
    "    print(f\"Party {party}: {seats} seats\")\n",
    "\n",
    "print(\"Model Accuracy:\", accuracy_score(y_test, y_pred))\n",
    "print(\"\\nClassification Report for 2024:\\n\", classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "de8ed4ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:57.748250Z",
     "iopub.status.busy": "2024-11-20T01:56:57.747881Z",
     "iopub.status.idle": "2024-11-20T01:56:58.144792Z",
     "shell.execute_reply": "2024-11-20T01:56:58.143863Z"
    },
    "papermill": {
     "duration": 0.404872,
     "end_time": "2024-11-20T01:56:58.146819",
     "exception": false,
     "start_time": "2024-11-20T01:56:57.741947",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "party_seat_counts_2024.plot(kind='barh', color='skyblue')\n",
    "\n",
    "plt.xlabel('Number of Seats')\n",
    "plt.ylabel('Party')\n",
    "plt.title('Total Predicted Number of Seats by Party in 2024')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea038f7a",
   "metadata": {
    "papermill": {
     "duration": 0.005127,
     "end_time": "2024-11-20T01:56:58.157303",
     "exception": false,
     "start_time": "2024-11-20T01:56:58.152176",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2019"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e1250faf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:58.169460Z",
     "iopub.status.busy": "2024-11-20T01:56:58.169080Z",
     "iopub.status.idle": "2024-11-20T01:56:58.177259Z",
     "shell.execute_reply": "2024-11-20T01:56:58.176320Z"
    },
    "papermill": {
     "duration": 0.016646,
     "end_time": "2024-11-20T01:56:58.179238",
     "exception": false,
     "start_time": "2024-11-20T01:56:58.162592",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original classes for 2019: [0, 1, 2, 3, 4, 6, 7, 8, 12, 15, 17, 18, 19, 21, 22, 23, 26, 32, 34, 39, 41, 42, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57]\n",
      "Label mapping for 2019: {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 6: 5, 7: 6, 8: 7, 12: 8, 15: 9, 17: 10, 18: 11, 19: 12, 21: 13, 22: 14, 23: 15, 26: 16, 32: 17, 34: 18, 39: 19, 41: 20, 42: 21, 46: 22, 47: 23, 49: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29, 56: 30, 57: 31}\n",
      "New class labels for 2019: [ 2  6  4  3 12 17  8  1  7  9  5 18 25 20 26 15 11 27  0 19 28 16 29 10\n",
      " 30 22 23 13 21 31 24 14]\n"
     ]
    }
   ],
   "source": [
    "original_classes_2019 = sorted(df['Party_2019'].unique())\n",
    "\n",
    "label_mapping_2019 = {original_classes_2019[i]: i for i in range(len(original_classes_2019))}\n",
    "\n",
    "df['Party_2019_mapped'] = df['Party_2019'].map(label_mapping_2019)\n",
    "\n",
    "print(\"Original classes for 2019:\", original_classes_2019)\n",
    "print(\"Label mapping for 2019:\", label_mapping_2019)\n",
    "print(\"New class labels for 2019:\", df['Party_2019_mapped'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "88fe93b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:58.191417Z",
     "iopub.status.busy": "2024-11-20T01:56:58.191056Z",
     "iopub.status.idle": "2024-11-20T01:56:58.195797Z",
     "shell.execute_reply": "2024-11-20T01:56:58.194918Z"
    },
    "papermill": {
     "duration": 0.012891,
     "end_time": "2024-11-20T01:56:58.197660",
     "exception": false,
     "start_time": "2024-11-20T01:56:58.184769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "features_2019 = [\n",
    "    'State_2004', 'Electors_2004', 'Votes_2004', 'Turnout_2004', 'Margin_2004', 'Margin %_2004',\n",
    "    'State_2009', 'Electors_2009', 'Votes_2009', 'Turnout_2009', 'Margin_2009', 'Margin %_2009',\n",
    "    'State_2014', 'Electors_2014', 'Votes_2014', 'Turnout_2014', 'Margin_2014', 'Margin %_2014',\n",
    "]\n",
    "\n",
    "target_2019 = 'Party_2019_mapped'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c071c092",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:58.210456Z",
     "iopub.status.busy": "2024-11-20T01:56:58.209729Z",
     "iopub.status.idle": "2024-11-20T01:56:58.214916Z",
     "shell.execute_reply": "2024-11-20T01:56:58.213981Z"
    },
    "papermill": {
     "duration": 0.01375,
     "end_time": "2024-11-20T01:56:58.216864",
     "exception": false,
     "start_time": "2024-11-20T01:56:58.203114",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df[features_2019]\n",
    "y = df[target_2019]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "26be3172",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:58.229218Z",
     "iopub.status.busy": "2024-11-20T01:56:58.228853Z",
     "iopub.status.idle": "2024-11-20T01:56:58.235689Z",
     "shell.execute_reply": "2024-11-20T01:56:58.234888Z"
    },
    "papermill": {
     "duration": 0.015302,
     "end_time": "2024-11-20T01:56:58.237596",
     "exception": false,
     "start_time": "2024-11-20T01:56:58.222294",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c5503362",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:58.249689Z",
     "iopub.status.busy": "2024-11-20T01:56:58.249251Z",
     "iopub.status.idle": "2024-11-20T01:56:58.259774Z",
     "shell.execute_reply": "2024-11-20T01:56:58.258854Z"
    },
    "papermill": {
     "duration": 0.018717,
     "end_time": "2024-11-20T01:56:58.261700",
     "exception": false,
     "start_time": "2024-11-20T01:56:58.242983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MultinomialNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MultinomialNB</label><div class=\"sk-toggleable__content\"><pre>MultinomialNB()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "MultinomialNB()"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nb_model_2019 = MultinomialNB()\n",
    "nb_model_2019.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "40ac64e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:58.275955Z",
     "iopub.status.busy": "2024-11-20T01:56:58.275247Z",
     "iopub.status.idle": "2024-11-20T01:56:58.293230Z",
     "shell.execute_reply": "2024-11-20T01:56:58.291952Z"
    },
    "papermill": {
     "duration": 0.02704,
     "end_time": "2024-11-20T01:56:58.295621",
     "exception": false,
     "start_time": "2024-11-20T01:56:58.268581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Total predicted number of seats by each party in 2019:\n",
      "Party 0: 3 seats\n",
      "Party 1: 3 seats\n",
      "Party 2: 10 seats\n",
      "Party 3: 3 seats\n",
      "Party 4: 1 seats\n",
      "Party 5: 7 seats\n",
      "Party 6: 2 seats\n",
      "Party 7: 1 seats\n",
      "Party 8: 3 seats\n",
      "Party 9: 2 seats\n",
      "Party 10: 2 seats\n",
      "Party 11: 2 seats\n",
      "Party 12: 1 seats\n",
      "Party 14: 7 seats\n",
      "Party 15: 1 seats\n",
      "Party 17: 2 seats\n",
      "Party 19: 1 seats\n",
      "Party 20: 2 seats\n",
      "Party 21: 2 seats\n",
      "Party 24: 1 seats\n",
      "Party 25: 2 seats\n",
      "Party 26: 3 seats\n",
      "Party 27: 2 seats\n",
      "Party 28: 11 seats\n",
      "Party 30: 1 seats\n",
      "Party 31: 2 seats\n",
      "Model Accuracy: 0.16883116883116883\n",
      "\n",
      "Classification Report for 2019:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00         1\n",
      "           1       0.00      0.00      0.00         0\n",
      "           2       0.80      0.15      0.26        52\n",
      "           3       0.33      0.50      0.40         2\n",
      "           4       0.00      0.00      0.00         4\n",
      "           5       0.00      0.00      0.00         2\n",
      "           6       0.00      0.00      0.00         1\n",
      "           7       0.00      0.00      0.00         1\n",
      "           8       0.67      1.00      0.80         2\n",
      "           9       0.00      0.00      0.00         1\n",
      "          10       0.00      0.00      0.00         0\n",
      "          11       0.00      0.00      0.00         0\n",
      "          12       0.00      0.00      0.00         3\n",
      "          13       0.00      0.00      0.00         1\n",
      "          14       0.00      0.00      0.00         0\n",
      "          15       0.00      0.00      0.00         1\n",
      "          17       1.00      0.50      0.67         4\n",
      "          19       0.00      0.00      0.00         0\n",
      "          20       0.00      0.00      0.00         0\n",
      "          21       0.00      0.00      0.00         0\n",
      "          23       0.00      0.00      0.00         1\n",
      "          24       0.00      0.00      0.00         0\n",
      "          25       0.00      0.00      0.00         1\n",
      "          26       0.00      0.00      0.00         0\n",
      "          27       0.00      0.00      0.00         0\n",
      "          28       0.00      0.00      0.00         0\n",
      "          30       0.00      0.00      0.00         0\n",
      "          31       0.00      0.00      0.00         0\n",
      "\n",
      "    accuracy                           0.17        77\n",
      "   macro avg       0.10      0.08      0.08        77\n",
      "weighted avg       0.62      0.17      0.24        77\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "y_pred_2019 = nb_model_2019.predict(X_test)\n",
    "\n",
    "party_seat_counts_2019 = pd.Series(y_pred_2019).value_counts().sort_index()\n",
    "\n",
    "print(\"\\nTotal predicted number of seats by each party in 2019:\")\n",
    "for party, seats in party_seat_counts_2019.items():\n",
    "    print(f\"Party {party}: {seats} seats\")\n",
    "\n",
    "print(\"Model Accuracy:\", accuracy_score(y_test, y_pred_2019))\n",
    "print(\"\\nClassification Report for 2019:\\n\", classification_report(y_test, y_pred_2019))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "032b7707",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-20T01:56:58.309116Z",
     "iopub.status.busy": "2024-11-20T01:56:58.308383Z",
     "iopub.status.idle": "2024-11-20T01:56:58.660007Z",
     "shell.execute_reply": "2024-11-20T01:56:58.658991Z"
    },
    "papermill": {
     "duration": 0.360519,
     "end_time": "2024-11-20T01:56:58.662134",
     "exception": false,
     "start_time": "2024-11-20T01:56:58.301615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "party_seat_counts_2019.plot(kind='barh', color='skyblue')\n",
    "\n",
    "plt.xlabel('Number of Seats')\n",
    "plt.ylabel('Party')\n",
    "plt.title('Total Predicted Number of Seats by Party in 2019')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fd3b04d",
   "metadata": {
    "papermill": {
     "duration": 0.006089,
     "end_time": "2024-11-20T01:56:58.674719",
     "exception": false,
     "start_time": "2024-11-20T01:56:58.668630",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6120521,
     "sourceId": 9956624,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.781783,
   "end_time": "2024-11-20T01:56:59.300624",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-11-20T01:56:52.518841",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
